# В google colab добавить: !pip install pyTelegramBotAPI
# Чтобы добавить новое слово — нужно его прописать в объект DEFINITOINS на 13 строчке
# Важно все новые аббривиатуры в коде писать только с маленьких букв
# Пользователь в телеграм может писать и с большой и с маленькой — код всегда приводит к строчным

from telebot import TeleBot, types

bot = TeleBot(token='Вставьте_свой_токен', parse_mode='html') # создание бота

# словарь с определениями и аббревиатурами, которые знает бот
# в формате:
# 'ключевая фраза': 'соответствующее ей определение'
DEFINITOINS = {
    'регресс': 'Проверить что новый функционал не сломал существующий',
    'смоук': 'проверка программного обеспечения на стабильность и наличие явных ошибок, выжимка самых критичных кейсов',
    'автоматизированное тестирование': 'процесс тестирования программного обеспечения, используя специальные программы',
    'альфа-тестирование': 'имитация реальной работы с системой разработчиками, или же реальная работа потенциальных пользователей на ранней стадии разработки продукта',
    'анализ предельных значений': 'техника проверки поведения продукта на предельных значениях (поля, записи, файлы и т.п.).',
    'андерлокинг': 'снижение частоты работы оборудования',
    'анекспектед бехевиер': 'неожиданное поведение',
    'апдейт': 'Обновление',
    'баг': 'дефект; несоответствие фактического результата выполнения программы ожидаемому результату',
    'баг-репорт': 'технический документ, содержащий в себе полное описание бага, включающий информацию, как о самом баге (краткое описание, серьезность, приоритет), так и об условиях возникновения этого бага',
    'багтрекер': 'система отслеживания ошибок; компьютерная программа, помогающая команде разработчиков и тестировщиков отслеживать и контролировать ошибки и пожелания пользователей, а также следить за устранением ошибок и исполнением пожеланий',
    'бекенд': 'программная часть, которую не видят пользователи сайта, связана с написанием серверных скриптов',
    'беклог': 'документ, в котором по уровню важности собран перечень требований к функциональности, которые должны быть реализованы',
    'бета-тестирование': 'интенсивное использование почти готовой версии продукта с целью выявить и исправить как можно больше дефектов перед окончательным выпуском для пользователей',
    'билд': 'объединение отдельных модулей программы в одну работающую систему',
    'дебагинг': 'процесс, во время которого находят и исправляют ошибки',
    'джира': 'система отслеживания ошибок, предназначенная для общения с пользователями и управления проектами',
    'обеспечение качества': 'совокупность мероприятий, охватывающих все технологические этапы разработки, выпуска и использования ПО',
    'инсталляционное тестирование': 'процесс тестирования стадии установки',
    'нефункциональное тестирование': 'тестирование свойств, которые не отвечают функциональности системы',
    'повторное тестирование': 'тестирование, которое проводиться чтобы убедиться в решении ранее найденных ошибок',
    'приемное тестирование': 'тестирование, направленное на проверку продукта с точки зрения конечного пользователя',
    'priority': 'атрибут, указывающий на скорость устранения бага, очередность выполнения задачи',
    'severity': 'степень влияния дефекта на работоспособность системы',
    'тест-кейс': 'чёткое описание действий, которые необходимо выполнить, для проверки функционала',
    'тест-дизайн': 'процесс, который помогает ограничить количество тест-кейсов и проверить негативные сценарии',
    'классы эквивалентности': 'множество значений, которые при тестировании дают одинаковый результат',
    'автоматизированное тестирование': 'процесс тестирования программного обеспечения, используя специальные программы',
    'альфа-тестирование':  'имитация реальной работы с системой разработчиками, или же реальная работа потенциальных пользователей на ранней стадии разработки продукта',
    'аутпут': 'исходные данные, результат',
    'аутсорсинг':  'полная или частичная передача задач, процессов для выполнения посторонним лицам юридическим или физическими',
    'багзилла': 'система отслеживания ошибок и ведения задач',
    'баг-репорт': 'технический документ, содержащий в себе полное описание бага, включающий информацию, как о самом баге (краткое описание, серьезность, приоритет), так и об условиях возникновения этого бага',
    'баундри вельюс': 'предельные значения',
    'бета-тестирование': 'интенсивное использование почти готовой версии продукта с целью выявить и исправить как можно больше дефектов перед окончательным выпуском для пользователей',
    'валидация': 'процесс оценки конечного продукта, необходимо проверить, соответствует ли программное обеспечение ожиданиям и требованиям клиента. Это динамичный механизм проверки и тестирования фактического продукта',
    'верификация': 'статическая практика проверки документов, дизайна, архитектуры, кода и тому подобное',
    'гайдлайн': 'инструкция. В ИТ-сфере руководство от одних разработчиков для других для правильной трактовки определенной работы',
    'генерить': 'создавать, предлагать',
    'дебагинг': 'процесс, во время которого находят и исправляют ошибки',
    'девелопер': 'специалист, занимающийся разработкой программного обеспечения',
    'деплоймент': 'процесс развертывания программного продукта в готовности к использованию',
    'десктоп': 'персональный компьютер',
    'дефект репорта': 'отчет об ошибке',
    'джира': 'система отслеживания ошибок, предназначенная для общения с пользователями и управления проектами',
    'домен': 'набор символов, которые определяют сайт в поисковой сети и идентифицируют для пользователей',
    'дропдаун': 'выпадающий список',
    'дымное тестирование': 'проверка выполнения функций продуктом после сборки нового или исправленного текущего кода',
    'эквивалентное разделение': 'техника, при которой функционал разделяется на группы значений, эквивалентных по воздействию на систему',
    'жизненный цикл программного обеспечения': 'это условная схема, включающая в себя отдельные этапы, которые являются стадиями развития процесса создания ПО',
    'обеспечение качества': 'совокупность мероприятий, охватывающих все технологические этапы разработки, выпуска и использования ПО',
    'сбой': 'несоответствие фактического результата работы системы или компонента тому результату, который ожидали',
    'инсталляционное тестирование': 'процесс тестирования стадии установки',
    'интродакшн': 'знакомство с продуктом, командой и т.п.; представление кого-то, чего-нибудь',
    'итеративная модель': 'предполагает разбиение проекта на части (этапы, итерации) и прохождение этапов жизненного цикла на каждом из них. Каждый этап является законченным сам по себе, совокупность этапов формирует конечный результат',
    'каскадная модель': 'последовательный метод разработки программного обеспечения, названный так из-за диаграммы, похожей на водопад',
    'кликабельность': 'возможность щелкнуть курсором мышки и перейти на ту или иную страницу',
    'конфигурационное тестирование': 'проверка работы программного обеспечения при различных конфигурациях системы',
    'кэш': 'временное хранилище для часто используемых файлов',
    'лог': 'файл со служебной и системной информацией о событиях в системе',
    'манки джоб': 'простая, повторяющаяся или рутинная работа, не требующая больших затрат',
    'нагрузочное тестирование': 'определение работоспособности, стабильности, потребления ресурсов и других атрибутов качества приложения в условиях различных сценариев использования и нагрузок',
    'нефункциональное тестирование': 'тестирование свойств, которые не отвечают функциональности системы',
    'оверлокинг': 'увеличение частоты компонента компьютера с целью увеличения скорости его работы',
    'операционное тестирование': 'процесс проверки системы на удовлетворение всех потребностей пользователя и соответствия бизнес-требованиям',
    'ошибка': 'действие, после которого возникает неправильный результат',
    'пофиксить': 'исправить ошибку',
    'предсказание ошибки': 'возможность тестировщика, благодаря своим знаниям и пониманию системы, предсказать, при каких условиях система может выдать ошибку',
    'повторное тестирование': 'тестирование, которое проводиться чтобы убедиться в решении ранее найденных ошибок',
    'пост-релиз': 'издание продукта с несколькими отличиями от RTM; является самой первой стадией разработки нового продукта',
    'пре-альфа': 'самая первая стадия разработки — от самого начала до стадии альфа',
    'приемное тестирование': 'тестирование, направленное на проверку продукта с точки зрения конечного пользователя',
    'приоритет багов': 'атрибут, указывающий на скорость устранения бага, очередность выполнения задачи',
    'продакт стайл гайд': 'документ, в котором указано правильное использование графических и функциональных элементов платформы для разработки программного обеспечения под эту платформу',
    'продакшн': 'выпуск готового продукта',
    'профит': 'польза, доход',
    'регрессионное тестирование': 'проверка на наличие ошибок после выполнения определенных действий или внесения изменений в систему',
    'релиз': 'выпуск продукта',
    'релиз-кандидат': 'предварительный релиз, который имеет потенциал стать окончательным, если не будут выявлены значительные нарушения',
    'репозиторий': 'хранилище; специальный сервер, на котором хранится доступное для загрузки ПО',
    'ручное тестирование': 'процесс ручной проверки программного обеспечения на наличие ошибок',
    'санитарное тестирование': 'тестирование определенной функции с целью проверки, соответствует ли ее работа заявленным требованиям',
    'сервер': 'это компьютер, устройство или программа, предназначенная для управления сетевыми ресурсами',
    'серьезность': 'степень влияния дефекта на работоспособность системы',
    'система отслеживания ошибок': 'система контроля багов',
    'скрам': 'подход управления проектами для гибкой разработки программного обеспечения',
    'скрипт': 'сценарий; программа, содержащая последовательность действий, предназначенных для автоматического выполнения определенной задачи',
    'спецификация': 'детальное описание того, как должно работать ПО',
    'спиральная модель': 'все этапы жизненного цикла при спиральной модели идут витками, на каждом из которых происходят проектирование, кодирование, дизайн, тестирование и тому подобное',
    'сравнительное тестирование': 'анализ плюсов и минусов продукта в сравнении с его ближайшими конкурентами',
    'стадии разработки ПО': 'определенные этапы, которые проходит команда разработчиков от старта до того, как продукт станет доступен широкой аудитории',
    'стейт транзишн тейбл': 'таблица переходов системы из одного состояния в другое',
    'стрессовое тестирование': 'проверка работоспособности продукта во время и после работы с гораздо большей нагрузкой, чем было запланировано',
    'таблица принятия решений': 'удобный инструмент, цель которого – упорядочить бизнес-требования к продукту',
    'тест-дизайн': 'один из этапов тестирования, во время которого проектируются возможные тест-кейсы (случаи)',
'тест-кейс': 'это тестовый артефакт, суть которого заключается в выполнении некоторого количества действий и/или условий, необходимых для проверки определенной функциональности программной системы, разрабатываемой системы',
 'тест-план': 'документ, в котором указан весь объем работ по тестированию, а также оценки рисков с вариантами их решения',
'тестирование': 'процесс проверки соответствия заявленных к продукту требований и реально реализованной функциональности, происходит путем наблюдения за его работой в искусственно созданных ситуациях и на ограниченном наборе тестов, выбранных определенным образом',
'тестирование безопасности': 'проверка, насколько система готова противостоять злонамеренным попыткам получить доступ к данным',
'тестирование взаимодействия': 'функциональное тестирование, цель которого проверить, как может приложение взаимодействовать с одними или несколькими элементами/системами',
'тестирование восстановления': 'проверка способности продукта восстанавливать свои функции после незапланированной ситуации',
'тестирование доступности': 'используется для выявления возможности использования системы и удобства для людей с ограниченными возможностями',
'тестирование сборки': 'предварительная проверка разрабатываемого программного продукта перед запуском полномасштабного тестирования по всем параметрам, проведенного QA-командой',
'тестирование локализации': 'проверка готовности продукта к использованию его на разных языках, учитывая национальные и культурные особенности',
'тестирование пользовательского интерфейса': 'тестирование, основная цель которого выявить, удобный ли определенный элемент для использования',
'тестирование масштабирования': 'изучение возможности увеличивать показатели производительности по мере увеличения количества доступных приложением ресурсов',
'тестирование сборки': 'тестирование, цель которого выявить, соответствуют ли требования выпущенной версии критериям качества для начала тестирования',
'тестирование совместимости': 'проверка возможности продукта работать в заданных условиях',
'фронтенд': 'интерфейс взаимодействия между пользователем и бэкендом',
'мобильное тестирование': 'тестирование мобильных приложений',
'консольное тестирование': 'тестирование приложений для консолей',
'веб-тестирование': 'тестирование браузерных приложений',
'статическое тестирование': 'тип тестирования, который предполагает, что программный код во время тестирования не будет выполняться',
'динамическое тестирование': 'тип тестирования, который предусматривает запуск программного кода',
'позитивное тестирование': 'процесс тестирования программного обеспечения на то, как оно должно работать',
'негативное тестирование': 'процесс тестирования программного обеспечения на то, как оно не должно работать',
'интеграционное тестирование': 'тестирование взаимодействия нескольких элементов системы',
'системное тестирование': 'тестирование всего приложения от начала до конца',
'модульное тестирование': 'тестирование определенных компонентов системы'
}

# обработчик команды '/start'
@bot.message_handler(commands=['start'])
def start_command_handler(message: types.Message):
    # отправляем ответ на команду '/start'
    
    bot.send_message(
        chat_id=message.chat.id, # id чата, в который необходимо направить сообщение
        text='Привет! Подскажу определения слов из сферы тестирования 🤓\nВведите интересующий вас термин, например, баг'
    )


# обработчик всех остальных сообщений
@bot.message_handler()
def message_handler(message: types.Message):
    # пробуем найти ключевую фразу в словаре
    definition = DEFINITOINS.get(
        message.text.lower(), # приводим текст сообщения к нижнему регистру
    )
    # если фразы нет в словаре, то переменная definition будет иметь значение None
    # проверяем это условие
    if definition is None:
        # если ключевая фраза не была найдена в словаре
        # отправляем ответ
        bot.send_message(
            chat_id=message.chat.id,
            text='😋 Я пока не знаю такого определения',
        )
        # выходим из функции
        return
    
    # если ключевая фраза была найдена, формируем текст сообщения и отправляем его
    # если перед строкой поставить букву f, то в фигурных скобках {} можно использовать переменные :)
    bot.send_message(
        chat_id=message.chat.id,
        text=f'Определение:\n<code>{definition}</code>',
    )

    bot.send_message(
        chat_id=message.chat.id,
        text=f'Введите другой термин',
    )


# главная функция программы
def main():
    # запускаем нашего бота
    bot.infinity_polling()


if __name__ == '__main__':
    main()
